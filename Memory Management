#include<stdio.h>
#define max 1000
int frag[max],b[max],f[max],i,j,nb,nf,temp,choice,highest=-1,lowest=9999;
static int bf[max],ff[max];


void firstfit(int b[max],int f[max],int nb,int nf)
{
    for(i=1;i<=nf;i++)
        {
            for(j=1;j<=nb;j++)
            {
                if(bf[j]!=1)
                {
                    temp=b[j]-f[i];
                    if(temp>=0)
                    {
                        ff[i]=j;
                        break;
                    }
                }            
            }
        frag[i]=temp;
        bf[ff[i]]=1;
        }
        printf("\nProcess_no:\tProcess_size :\tBlock_no:\tBlock_size:\tFragment");
        for(i=1;i<=nf;i++)
            if(frag[i]>-1)
                printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
            else
            {
                printf("\n%d\t\t%d\t\t not allocated",i,f[i]);
            }
            
}

void bestfit(int b[max],int f[max],int nb,int nf)
{
    for(i=1;i<=nf;i++)
	    {
		    for(j=1;j<=nb;j++)
		    {
		    	if(bf[j]!=1)
			    {
				    temp=b[j]-f[i];
				    if(temp>=0)
					    if(lowest>temp)
					    {
						    ff[i]=j;
						    lowest=temp;
					    }
			    }
		    }
		
		    frag[i]=lowest;
		    bf[ff[i]]=1;
		    lowest=10000;
	    }
	
	    printf("\nProcess_no\tProcess_size\tBlock_no\tBlock_size\tFragment");
	    for(i=1;i<=nf;i++)
		        if(frag[i]<2000)
                    printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
                 else
                    printf("\n%d\t\t%d\t\t not allocated",i,f[i]);
}
void worstfit(int b[max],int f[max],int nb,int nf)
{
    for(i=1;i<=nf;i++)
        {
            for(j=1;j<=nb;j++)
            {
                if(bf[j]!=1) 
                {
                    temp=b[j]-f[i];
                    if(temp>=0)
                        if(highest<temp)
                        {
                            ff[i]=j;
                            highest=temp;
                        }
                }
            }
            frag[i]=highest;
            bf[ff[i]]=1;
            highest=-1;
        }
        printf("\nProcess_no  \tProcess_size  \tBlock_no  \tBlock_size  \tFragment");
        for(i=1;i<=nf;i++)
            if(frag[i]>-1)
                printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
            else
            {
                printf("\n%d\t\t%d\t\t not allocated",i,f[i]);
            }
            
}
void main()
{
    printf("\nEnter the number of blocks:");
    scanf("%d",&nb);
    printf("Enter the number of processes:");
    scanf("%d",&nf);
    printf("\nEnter the size of the blocks:-\n");
    for(i=1;i<=nb;i++)
    {
        printf("Block %d:",i);
        scanf("%d",&b[i]);
    }
    printf("Enter the size of the processes:-\n");
    for(i=1;i<=nf;i++)
    {
        printf("Process %d:",i);
        scanf("%d",&f[i]);
    }
    printf("Enter 1:FirstFit 2:BestFit 3:WorstFit\n");
    scanf("%d",&choice);
 switch(choice)
    {
        case 1 :firstfit( b,f, nb, nf);
                break;
        case 2 :bestfit(b, f, nb,nf);
                break;
        case 3 :worstfit(b, f, nb, nf);
                break;      
        default :printf("Wrong input");
                break;
    }
    return;
}
