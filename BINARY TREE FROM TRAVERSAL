#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* left;
    struct node* right;
};
 
int search(int arr[], int strt, int end, int value);
struct node* newNode(int data);
 
struct node* buildTree(int in[], int pre[], int inStrt, int inEnd)
{
    static int preIndex = 0;
    if (inStrt > inEnd)
        return NULL;
    struct node* tNode = newNode(pre[preIndex++]);
    if (inStrt == inEnd)
        return tNode;
    int inIndex = search(in, inStrt, inEnd, tNode->data);
    tNode->left = buildTree(in, pre, inStrt, inIndex - 1);
    tNode->right = buildTree(in, pre, inIndex + 1, inEnd);
 
    return tNode;
}
 
int search(int arr[], int strt, int end, int value)
{
    int i;
    for (i = strt; i <= end; i++) {
        if (arr[i] == value)
            return i;
    }
}

struct node* newNode(int data)
{
    struct node* node = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
 
    return (node);
}
 
void printPostorder(struct node* node)
{
    if (node == NULL)
        return;
    printPostorder(node->left);
    printPostorder(node->right);
    printf("%d ", node->data);
}
int main()
{ 
    int in[20],pre[20];
    int n;
    printf("Enter the number of elements in binary tree : ");
    scanf("%d",&n);
    printf("Enter the binary tree elements in inorder format:\n");
    for(int i=0;i<n;i++)
        scanf("%d",&in[i]);
    printf("Enter the binary tree elements in preorder format:\n");
    for(int j=0;j<n;j++)
        scanf("%d",&pre[j]);
    struct node* root = buildTree(in, pre, 0, n-1);
    printf("Postorder traversal of the constructed tree is: \n");
    printPostorder(root);
    return 0;
}
